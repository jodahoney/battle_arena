OKAY.
So, for part b it seems that we are just changing up how the classess work a bit so that we dont have to write the name of the species before calling the demon class for the get dmg function. 
We also don't want to have to repeat the cout "The <whatever> attacks for <???> points!" in every class's getdmg function (remember that any copy pasta should be eliminated tbCS50)
	It would be better if that cout statement would occur just once, in the Creature class's getdmg function

1. in the creature class's get dmg funciton, insert the cout statement 
	- it will be implementing the getSpecies() function

2. without the creature class getdmg function being virtual, it just returns Creature for the getSpecies function, therefore printing out Creature as the damage dealer for each attack
	- by making the getspecies function a virtual function in the creature base class, that should fix all of those problems.

OKAY SO FOR THE EXTRA CREDIT PART

- there needs to be three different battles that take place
	- so lets say that a human and elf fight round 1, and the elf wins
	- that means that the elf goes to next round (because champion) and fights cyberdemon
	- then say cyberdemon wins, 

- SO: for each round after the first is a champion and a contender
- Round 1 will be elf vs human
- The winner of that will be champion, and it goes to battleRound 2
- BattleRound 2 will be (elf or human) vs cyberdemon
- BattleRound 3 will be winner of (elf or human) or cyberdemon vs Balrog

- REMEMBER that the health and hitpoints need to be reset for each battle, and that if there is a tie they need to be reset and the same battle needs to be done again 
	- do while creature1hp and creature2hp do not both equal or are less than 0
	

- SO What i have so far is the battle operation so that it will go until one wins, and that winner can be set as champion for round one. So maybe if i have battleArena function nested within the doBattle function
- doBattle will be the primary function, and it will call the battleArena function for elf and human
	- the winner of that will be returned from the function 